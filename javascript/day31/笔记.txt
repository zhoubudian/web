一.对象
一切都是对象,怎么理解?
1.值类型(标量)不是对象:语法糖
共四种（undefined, number, string, boolean）属于简单的值类型，不是对象。
2.引用类型都是对象(预定义)
函数、数组、对象、null、new Number(10)
new Number(10);
new String();
new Boolean();
都是对象


如果js中预定义的类和对象无法满足需要,我们可以自定义类和对象(记住:类名首字母大写).

二.类与对象
1.什么是类,什么是对象?
例:鸟类(共性),对象(例子):燕子,喜鹊
车类(共性),对象(例子)==>个性:长城,红旗,吉利

2.类和对象怎么使用?
类不能用,能用得只有对象(例子);

3.类与对象的关系
类能够"生产/制造"出对象(实例化)==>new 类名,我们使用对象完成代码的相关功能.

例:
//实例化一个字符串对象
var str=new String('老板,来份烤冷面');

//使用这个对象:在程序块中进行,字符串拼接,合并,拆分...



三.如何验证是否是对象?
typeof,instanceof (instance实例,例子==>对象object)


一切（引用类型）都是对象，对象是属性的集合

四.原型 
prototype(显示原型)
_proto_(隐士原型)

牢记:
var arr=new Array();
arr._proto_ === Array.prototype;

m某个对象的._proto_ === 该对象所属的类



1._proto_的理解  原型理解:
所有通过函数new出来的对象,这个对象都有一个_proto_指向这个函数prototype,对应中文名如下:
(1).显示原型:prototype(用于类)(这个类的所有方法和属性);
(2).隐士原型:_proto_(用于对象)(new出来的对象的一个指针=>即浅拷贝,每new出一个新对象,
都生成这样一个浅拷贝);

2.原型链的初步理解:
当你想要使用一个对象(例:一个数组)的某个功能时,如果该对象本身具有这个功能则直接调用;如果该对象本身没有这个功能,则去_proto_中查找.如果找不到的话,直接报错!  即:自己没有,去上级(类)中查找


原形毕露